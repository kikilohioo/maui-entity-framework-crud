<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="ComShopApp.MainPage">

    <!--#region ######    Sumario de aprendizajez    ######-->
    <!--Aprendizajes generales sobre manejos de layouts-->
    <!--FlexLayout.Grow="1" hace que tome todo el espacio disponible porque es como decir flex: 1-->
        
    <!--FlexLayout.Basis="value" donde value puede ser un numero (supongo pixeles) o un % de la pantalla(column=alto y row=ancho, de la pantalla)-->
        
    <!--Esto es como si todos los elementos a la interna tuvieran position: absolute,
        entonces de esta forma requieren para posicionarse que se les agreguen top, bottom, left o right,
        como? asi: AbsoluteLayout.LayoutBounds="4,4,100,50" (coordX, coordY, width, height)-->
    
    <!--Mediante ColumnDefinitions="*" podemos agregar mas columnas asi "*,*,*" y podemos tambien definirlas asi "auto,200,*"-->
    
    <!--Con cualquier elemento ej: VerticalStackLayout podemos hacer VerticalStackLayout.GestureRecognizers y dentro de un par de etiquetas asi
        agregar por ejemplo <TapGestureRecognizer Tapped="TapGestureRecognizer_Tapped" /> para que reconozca cuando se toca y se asigna a ese metodo creado en el code behind-->
    <!--#endregion-->

    <Grid
        ColumnDefinitions="Auto, Auto"
        RowDefinitions="Auto, Auto, Auto"
        VerticalOptions="Center"
        HorizontalOptions="Center"
        >

        <!--categorias-->
        <Ellipse WidthRequest="50" HeightRequest="50" Fill="LightBlue" Margin="4"/>
        <Label 
            x:Name="category" 
            VerticalTextAlignment="Center" 
            HorizontalTextAlignment="Center" 
            FontSize="30"
            />
        <Label Text="Categorias" VerticalTextAlignment="Center"  FontSize="30" Grid.Column="1"/>

        <!--productos-->
        <Ellipse WidthRequest="50" HeightRequest="50" Fill="LightBlue" Margin="4" Grid.Row="1"/>
        <Label 
            x:Name="product" 
            VerticalTextAlignment="Center" 
            HorizontalTextAlignment="Center" 
            FontSize="30"
            Grid.Row="1"
            />
        <Label Text="Productos" VerticalTextAlignment="Center"  FontSize="30" Grid.Column="1" Grid.Row="1"/>

        <!--clientes-->
        <Ellipse WidthRequest="50" HeightRequest="50" Fill="LightBlue" Margin="4" Grid.Row="2"/>
        <Label 
            x:Name="client" 
            VerticalTextAlignment="Center" 
            HorizontalTextAlignment="Center" 
            FontSize="30"
            Grid.Row="2"
            />
        <Label Text="Clientes" VerticalTextAlignment="Center"  FontSize="30" Grid.Column="1" Grid.Row="2"/>

    </Grid>
    
    <!--#region Codigo para probar animaciones y figuras geometricas-->
    <!--Para probar codigo de animaciones-->
    <!--<VerticalStackLayout>
        <Ellipse WidthRequest="200" HeightRequest="200">
            <Ellipse.Fill>
                <SolidColorBrush Color="Orange" />
            </Ellipse.Fill>
        </Ellipse>

        <Rectangle WidthRequest="100" HeightRequest="80" Fill="Blue">
            <Rectangle.GestureRecognizers>
                <TapGestureRecognizer Tapped="Rectanlge_Tapped" />
            </Rectangle.GestureRecognizers>
        </Rectangle>
    </VerticalStackLayout>-->
    <!--#endregion-->
    
    <!--#region Controles de Formularios-->
    <!--Aqui podemos ver los controles mas comunmente utilizados en formularios-->
    <!--<VerticalStackLayout Style="{StaticResource BackgroundPage}">
        <DatePicker />
        <TimePicker />
        <Editor Placeholder="Esto es un editor" HeightRequest="200" />
        <Entry Placeholder="Esto es un input" />
        <Button Text="Boton"/>
        <Picker>
            <Picker.Items>
                <x:String>Item 1</x:String>
                <x:String>Item 2</x:String>
                <x:String>Item 3</x:String>
            </Picker.Items>
        </Picker>
        <Stepper Minimum="0" Maximum="10" Increment="1" />
        <Switch IsToggled="False" />
        <Slider Minimum="0" Maximum="1" />
    </VerticalStackLayout>-->
    <!--#endregion-->

    <!--#region ContentPage.Resource -> Style(n) -> Setter(n) son como <style></style> de html y css -->
    <!--<ContentPage.Resources>-->
        <!--Asi se aplica para todos los elementos del documento del TargetType="Grid"-->
        <!--<Style TargetType="Grid">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="Blue"/>
                </Setter.Value>
            </Setter>
        </Style>-->
        
        <!--Asi se agrega para un elemento con un Key especifico solo para este documento-->
        <!--<Style TargetType="Grid" x:Key="CustomGrid">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="DeepPink"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Padding" Value="20"/>
        </Style>-->
    <!--</ContentPage.Resources>-->
    <!--Mediante ColumnDefinitions="*" podemos agregar mas columnas asi "*,*,*" y podemos tambien definirlas asi "auto,200,*"-->
    <!--<Grid ColumnDefinitions="*,*" RowDefinitions="*,*" Style="{StaticResource CustomGrid}">
        <Label FontSize="30" x:Name="category" />
        <Label FontSize="30" x:Name="client" Grid.Column="1"/>
        <Label FontSize="30" x:Name="product" Grid.Column="1" Grid.Row="1"/>
    </Grid>-->
    <!--#endregion-->

    <!--#region AbsoluteLayout (simil a que todos los elementos dentro tengan position: absolute)-->
    <!--Esto es como si todos los elementos a la interna tuvieran position: absolute,
    entonces de esta forma requieren para posicionarse que se les agreguen top, bottom, left o right,
    como? asi: AbsoluteLayout.LayoutBounds="4,4,100,50" (coordX, coordY, width, height)-->
    <!--<AbsoluteLayout>
        <Button Text="Hola" AbsoluteLayout.LayoutBounds="4,4,100,50"/>
        <Button Text="Mundo" AbsoluteLayout.LayoutBounds="105,4,100,50"/>
        <Label Text="holamundo.com" AbsoluteLayout.LayoutBounds="4,60,120,50"/>

        <Rectangle BackgroundColor="white" AbsoluteLayout.LayoutBounds="40,125,120,50"/>
        <Rectangle BackgroundColor="Blue" AbsoluteLayout.LayoutBounds="150,100,120,50"/>
    </AbsoluteLayout>-->
    <!--#endregion-->
    
    <!--#region Flex Layout (simil a display: flex)-->
    <!--Esto es lo mas parecido que vamos a tener a un div con display flex-->
    <!--<FlexLayout Direction="Column" JustifyContent="SpaceBetween" AlignContent="Center">
        --><!--FlexLayout.Basis="value" donde value puede ser un numero (supongo pixeles) o un % de la pantalla(column=alto y row=ancho, de la pantalla)--><!--
        <Label x:Name="category" FlexLayout.Basis="10%"/>
        <Label x:Name="client" />
        <Label x:Name="product" />

        --><!--FlexLayout.Grow="1" hace que tome todo el espacio disponible porque es como decir flex: 1--><!--
        <Border FlexLayout.Grow="1">
            <CollectionView>
                
            </CollectionView>
        </Border>
        <Button Text="Guardar" />
        <Button Text="Ver" />
    </FlexLayout>-->
    <!--#endregion-->

    <!--#region Grilla con coordenadas-->
    <!--Esto es para organizar contenido en formato de grilla con coordenadas y otros aspectos de css grid-->
    <!--<Grid>
        --><!--Aqui se define la grilla entera y funciona como un sistema de coordenadas--><!--
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="2*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        --><!--Aca van los eleemntos y con Grid.Row y Grid.Column se asigna la posicion--><!--
        <Label x:Name="category" Grid.Row="0" Grid.Column="0" />
        <Label x:Name="client" Grid.Row="0" Grid.Column="1" />
        <Label x:Name="product" Grid.Row="1" Grid.Column="0" />
        <Button x:Name="btnGuardar" HorizontalOptions="Center" Grid.Row="2" Text="Guardar" Grid.ColumnSpan="2"/>
    </Grid>-->
    <!--#endregion-->

    <!--#region VerticalStackLayout y HorizontalStackLayout-->
    <!--Esta forma es parecida al los divs sin flex-->
    <!--<VerticalStackLayout>
        <HorizontalStackLayout HorizontalOptions="Center" Spacing="10">
            <Label x:Name="category" />
            <Label x:Name="client" />
            <Label x:Name="product" />
        </HorizontalStackLayout>
        <Label Text="Mi App" />
    </VerticalStackLayout>-->
    <!--#endregion-->
</ContentPage>
